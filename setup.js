#!/usr/bin/env node

import fs from 'fs/promises';
import path from 'path';
import chalk from 'chalk';
import inquirer from 'inquirer';

class SetupTool {
    constructor() {
        this.envPath = path.join(process.cwd(), '.env');
        this.examplePath = path.join(process.cwd(), '.env.example');
    }

    async run() {
        console.log(chalk.blue('🔧 MongoDB Migration Tool Setup\n'));

        try {
            // Check if .env already exists
            const envExists = await this.fileExists(this.envPath);

            if (envExists) {
                const { overwrite } = await inquirer.prompt([
                    {
                        type: 'confirm',
                        name: 'overwrite',
                        message: '.env file already exists. Do you want to overwrite it?',
                        default: false
                    }
                ]);

                if (!overwrite) {
                    console.log(chalk.yellow('Setup cancelled. Existing .env file preserved.'));
                    return;
                }
            }

            // Get connection configurations
            const connections = await this.gatherConnections();

            // Generate .env content
            const envContent = this.generateEnvContent(connections);

            // Write .env file
            await fs.writeFile(this.envPath, envContent);

            console.log(chalk.green('✅ .env file created successfully!'));
            console.log(chalk.blue('📁 Location:'), chalk.white(this.envPath));
            console.log(chalk.blue('🚀 You can now run:'), chalk.yellow('bun run start'));

        } catch (error) {
            console.log(chalk.red('❌ Setup failed:'), error.message);
        }
    }

    async fileExists(filePath) {
        try {
            await fs.access(filePath);
            return true;
        } catch {
            return false;
        }
    }

    async gatherConnections() {
        const connections = [];

        console.log(chalk.blue('📋 Let\'s set up your database connections:\n'));

        while (true) {
            const connection = await this.getConnectionInfo();
            connections.push(connection);

            const { addAnother } = await inquirer.prompt([
                {
                    type: 'confirm',
                    name: 'addAnother',
                    message: 'Add another database connection?',
                    default: true
                }
            ]);

            if (!addAnother) break;
        }

        return connections;
    }

    async getConnectionInfo() {
        const { name, uri } = await inquirer.prompt([
            {
                type: 'input',
                name: 'name',
                message: 'Connection name (e.g., local, dev, staging, prod):',
                validate: (input) => {
                    if (!input.trim()) return 'Connection name is required';
                    if (!/^[a-zA-Z0-9_-]+$/.test(input.trim())) {
                        return 'Connection name can only contain letters, numbers, hyphens, and underscores';
                    }
                    return true;
                }
            },
            {
                type: 'input',
                name: 'uri',
                message: 'MongoDB connection URI:',
                validate: (input) => {
                    const mongoUriPattern = /^mongodb(\+srv)?:\/\//;
                    return mongoUriPattern.test(input) || 'Please enter a valid MongoDB URI (mongodb:// or mongodb+srv://)';
                }
            }
        ]);

        return {
            name: name.trim().toUpperCase(),
            uri: uri.trim()
        };
    }

    generateEnvContent(connections) {
        let content = '# MongoDB Connection Strings Configuration\n';
        content += '# Generated by MongoDB Migration Tool Setup\n';
        content += `# Created: ${new Date().toISOString()}\n\n`;

        connections.forEach(conn => {
            content += `# ${conn.name} Database\n`;
            content += `DB_${conn.name}_URI=${conn.uri}\n\n`;
        });

        content += '# Add more connections following the pattern:\n';
        content += '# DB_<NAME>_URI=mongodb://connection-string\n';

        return content;
    }
}

// Run setup if called directly
if (import.meta.main) {
    const setup = new SetupTool();
    setup.run();
}
